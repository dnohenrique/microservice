using Amazon.Extensions.NETCore.Setup;
using Amazon.SimpleNotificationService;
using Application.ViewModels.Response;
using Domain.Interfaces.Aws;
using Infrastructure.Configuration;
using Infrastructure.IoC;
using MediatR;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Reflection;

namespace Api
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddHealthChecks();
            services.AddHttpClient();
            services.AddMvc(_ => _.EnableEndpointRouting = false);

            ConfiguresAWSInjection(services);

            services.AddMediatR(typeof(Startup));

            // .NET Native DI Abstraction
            RegisterServices(services);       

            // Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Version = "v1",
                    Title = "Empresa Service",
                    Description = "Serviço para gerenciar Empresas",
                    Contact = new OpenApiContact
                    {
                        Name = "Equipe Férias&Co",
                        Email = "support@ferias.co",
                        Url = new Uri("https://www.ferias.co/")
                    },
                    License = new OpenApiLicense
                    {
                        Name = "Férias & Co",
                        Url = new Uri("https://www.ferias.co/")
                    }
                });

                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                c.IncludeXmlComments(xmlPath);
            });

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
           .AddJwtBearer(options =>
           {
               options.TokenValidationParameters = new TokenValidationParameters
              {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = "EmpresaService",
                ValidAudience = "Postman"
             };
            });
                        

            services.Configure<MongoDbConfiguration>(Configuration.GetSection("MongoDbConfiguration"));

        }      

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts. 
                app.UseHsts();
            }

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints => {
                endpoints.MapHealthChecks("/health");
            });
            
            app.UseExceptionHandler(a => a.Run(async context =>
            {
                var feature = context.Features.Get<IExceptionHandlerPathFeature>();

                context.Response.ContentType = "application/json";

                var result = JsonConvert.SerializeObject(new
                {
                    metadata = new { resultset = new { type = ReturnType.List.ToString() } },
                    result = new string[] { feature.Error.Message }
                });

                await context.Response.WriteAsync(result);
            }));

            // Enable CORS
            app.UseCors(builder =>
            {
                builder
                    .AllowAnyOrigin()
                    .AllowAnyHeader()
                    .AllowAnyMethod();
            });

            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();

            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), 
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Usuário Service");
                c.RoutePrefix = string.Empty;
            });

            //Autorização 
            app.UseAuthentication();
            app.UseMvc();
        }
        private void ConfiguresAWSInjection(IServiceCollection services)
        {
            var awsSnsOptions = new AWSOptions();
            //A variável de ambiente AWS:ServiceURL_Local só deve ser usada em ambiente de dev, ou seja, estar no "appsettings.Development.json"
            awsSnsOptions.DefaultClientConfig.ServiceURL = Configuration.GetSection("AWS:ServiceURL_Local").Value;
            services.AddAWSService<IAmazonSimpleNotificationService>(options: awsSnsOptions);
            services.AddDefaultAWSOptions(Configuration.GetAWSOptions());
            services.AddSingleton<ISnsConfiguration, SnsConfiguration>();
        }
        private static void RegisterServices(IServiceCollection services)
        {
            // Adding dependencies from another layers (isolated from Presentation)
            NativeInjectorBootstrapper.RegisterServices(services);
        }        

    }
}
